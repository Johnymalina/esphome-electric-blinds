#https://github.com/RoadkillUK/Motor-on-a-Roller-Blind-for-ESPHOME - Written by RoadkillUK

# This sketch will add 2 switches named <upper_devicename> Setup Switch and Setup Button
# Use your mobile or tablet and connect to http://<devicename>.local to set up the blind
# Turn on the Setup Switch to enter Setup Mode and use the Setup Button as shown below to setup blinds.

# 1) Turn on the Setup Switch to enter setup mode
# 2) Press Setup button to start the blind closing
# 3) Press Setup button again when closed and blind starts to open (actually resets the stepper position to 0)
# 4) Press Setup button again when blind is fully open
# 5) Job Done

# This sketch also includes a momentary button on D7 which can be used in the following way
# 1) Press button for > 1 second to enter setup mode
# 2) Press button again to start the blind closing
# 3) Press button again when closed and blind starts to open (actually resets the stepper position to 0)
# 4) Press button again when blind is fully open
# 5) Job Done

# Button is also used to open/close the blind (must be fully open/closed first)

# Copy the file to the config/esphome/ directory

substitutions:
  devicename: rollos-test
  upper_devicename: Rollos Test

  
  speed: 1500 steps/s # Set the speed of the motor
  en_pin: "16"

  mystepper: my_stepper # Name of the stepper motor (leave as is)
  reportin: "0" # Set if you want the blind to report position while moving (causes delay)  
  step_pin: "27" # Swap these \_ coil a
  dir_pin: "25" # Swap these /

  mystepper_2: my_stepper_2 # Name of the stepper motor (leave as is)
  reportin_2: "0" # Set if you want the blind to report position while moving (causes delay)
  step_pin_2: "5"
  dir_pin_2: "4"  
# NOTE:  If you find that your shades are going the wrong way, you can change the pin
#        settings or reverse the + and â€“ wires for each of the A and B motor
#        pairs on your driver and the motor will spin in the opposite direction.

# These pinouts are for the original 'Motor on a Roller Blind'esphome:
esp32:
  board: esp32dev
  framework:
    type: arduino
  
esphome:
  name: $devicename
  friendly_name: $upper_devicename
  on_boot:
    - priority: -200.0
      then:
      #Stepper1
      - stepper.report_position: # Set stepper to global variable
          id: $mystepper
          position: !lambda return id(${mystepper}_global);
      - stepper.set_target: # Set stepper to global variable
          id: $mystepper
          target: !lambda return id(${mystepper}_global);
      - if: # If blind is Closed
          condition:
            - lambda: 'return id(${mystepper}_global) == 0;'
          then: # Publish state etc.
            - cover.template.publish:
                id: blinded
                state: CLOSED
                current_operation: IDLE
      - if: # If blind is Open
          condition:
            - lambda: 'return id(${mystepper}_global) == id(endstop);'
          then: # Publish state etc.
            - cover.template.publish:
                id: blinded
                state: OPEN
                current_operation: IDLE
      - if: # If blind is Neither
          condition:
            - lambda: 'return (id(${mystepper}_global) != 0) && (id(${mystepper}_global) != id(endstop));'
          then: #  # Publish state etc.
            - cover.template.publish:
                id: blinded
                position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));' 
                current_operation: IDLE
      #Stepper2
      - stepper.report_position: # Set stepper to global variable
          id: $mystepper_2
          position: !lambda return id(${mystepper_2}_global);
      - stepper.set_target: # Set stepper to global variable
          id: $mystepper_2
          target: !lambda return id(${mystepper_2}_global);
      - if: # If blind is Closed
          condition:
            - lambda: 'return id(${mystepper_2}_global) == 0;'
          then: # Publish state etc.
            - cover.template.publish:
                id: blinded_2
                state: CLOSED
                current_operation: IDLE
      - if: # If blind is Open
          condition:
            - lambda: 'return id(${mystepper_2}_global) == id(endstop_2);'
          then: # Publish state etc.
            - cover.template.publish:
                id: blinded_2
                state: OPEN
                current_operation: IDLE
      - if: # If blind is Neither
          condition:
            - lambda: 'return (id(${mystepper_2}_global) != 0) && (id(${mystepper_2}_global) != id(endstop_2));'
          then: #  # Publish state etc.
            - cover.template.publish:
                id: blinded_2
                position: !lambda 'return (float(float(id($mystepper_2).current_position) / float(id(endstop_2))));' 
                current_operation: IDLE
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  ap:
    ssid: $devicename
    password: "CwIcBf0KyzWN"

web_server:
  port: 80

logger:

api:
  encryption:
    key: "fdissEsAd6MzbRGIeVYJIlTm7y5rOvV+4JgoHMGcEWY="

ota:
  password: "f47ca81c700588f4c1cd044f99a6c336"

captive_portal:

stepper:
  - platform: a4988
    id: $mystepper
    step_pin: $step_pin
    dir_pin:
      number: $dir_pin
      inverted: true
    max_speed: ${speed}
    # Optional:
    acceleration: inf
    deceleration: inf  

  - platform: a4988
    id: $mystepper_2
    step_pin: $step_pin_2
    dir_pin:
      number: $dir_pin_2
      inverted: true
    max_speed: ${speed}
    # Optional:
    acceleration: inf
    deceleration: inf 

globals:
  #Stepper1
  - id: ${mystepper}_global # Integer for storing the stepper position in case of reboot
    type: int
    restore_value: True
    initial_value: '0'

  - id: openclosed # Boolean to store OPEN/CLOSED state
    type: bool
    restore_value: True
    initial_value: '0'

  - id: endstop # Variable for storing ENDSTOP (how far to move stepper)
    type: int
    restore_value: True
    initial_value: '1000'

  - id: settingmode # Integer for Setup Mode
    type: int
    restore_value: no
    initial_value: '0'

  - id: reportin # Boolean for reporting the position of blind when moving (See testblind.yaml)
    type: bool
    restore_value: no
    initial_value: '${reportin}'

  #Stepper2
  - id: ${mystepper_2}_global # Integer for storing the stepper position in case of reboot
    type: int
    restore_value: True
    initial_value: '0'

  - id: openclosed_2 # Boolean to store OPEN/CLOSED state
    type: bool
    restore_value: True
    initial_value: '0'

  - id: endstop_2 # Variable for storing ENDSTOP (how far to move stepper)
    type: int
    restore_value: True
    initial_value: '1000'

  - id: settingmode_2 # Integer for Setup Mode
    type: int
    restore_value: no
    initial_value: '0'

  - id: reportin_2 # Boolean for reporting the position of blind when moving (See testblind.yaml)
    type: bool
    restore_value: no
    initial_value: '${reportin}'

text_sensor:
  - platform: version
    name: ${upper_devicename} ESPHome Version
    hide_timestamp: true
  - platform: wifi_info
    ip_address:
      name: ${upper_devicename} IP
      icon: mdi:ip-network
    ssid:
      name: ${upper_devicename} SSID
      icon: mdi:wifi
    mac_address:
      name: "${upper_devicename} MAC"
      icon: mdi:identifier
  - platform: template
    name: ${upper_devicename} Friendly Name
    icon: 'mdi:information-outline'
    lambda: |-
      return {"$upper_devicename"};
  - platform: template
    name: ${upper_devicename} Uptime
    id: uptime_human
    icon: mdi:clock-start

sensor:
  # Uptime sensor.
  - platform: uptime
    name: ${upper_devicename} Uptime Internal
    id: 'upptime'
    internal: True
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(upptime).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? String(days) + "d " : "") +
                (hours ? String(hours) + "h " : "") +
                (minutes ? String(minutes) + "m " : "") +
                (String(seconds) + "s")
              ).c_str();
  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${upper_devicename} WiFi Signal
    update_interval: 120s

switch:
  - platform: template
    name: ${upper_devicename} Setup Switch # Switch to enter Setup Mode
    id: setupswitch
    lambda: |-
      if (id(settingmode) != 0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      then:
        - logger.log: "Entered Settings Mode"
        - globals.set:
            id: settingmode
            value:  '1'
    turn_off_action:
      then:
        - logger.log: "Exiting Settings Mode"
        - globals.set:
            id: settingmode
            value:  '0'

  - platform: template
    name: ${upper_devicename} 2 Setup Switch # Switch to enter Setup Mode
    id: setupswitch_2
    lambda: |-
      if (id(settingmode_2) != 0) {
        return true;
      } else {
        return false;
      }
    turn_on_action:
      then:
        - logger.log: "Entered Settings Mode"
        - globals.set:
            id: settingmode_2
            value:  '1'
    turn_off_action:
      then:
        - logger.log: "Exiting Settings Mode"
        - globals.set:
            id: settingmode_2
            value:  '0'

  - platform: gpio
    name: Steppers Enabled
    pin:
      number: $en_pin
      inverted: True
    restore_mode: RESTORE_DEFAULT_ON

button:
  - platform: template
    name: ${upper_devicename} Setup Button # Software Button to replicate the Physical Button
    id: hasetup
    on_press:
      - if: # If settings variable is on
          condition:
            - lambda: 'return id(settingmode) != 0;'
          then: # Enter Setting Mode
            - script.execute: setupbutton

  - platform: template
    name: ${upper_devicename} 2 Setup Button # Software Button to replicate the Physical Button
    id: hasetup_2
    on_press:
      - if: # If settings variable is on
          condition:
            - lambda: 'return id(settingmode_2) != 0;'
          then: # Enter Setting Mode
            - script.execute: setupbutton_2

cover:
  - platform: template
    name: "${upper_devicename} 1"
    id: blinded
    open_action:
      then:
        - logger.log: "Opening"
        - logger.log:
            format: "Endstop is: %d"
            args: [ 'id(endstop)' ]
        - stepper.set_target: # Send stepper to endstop
            id: $mystepper
            target: !lambda return id(endstop);
        - if:
            condition: 
              lambda: 'return id(reportin) == 1;' # If Reporting is Selected
            then:
              - while:
                  condition:
                    lambda: 'return id($mystepper).current_position != id(endstop);'
                  then:
                    - cover.template.publish:
                        id: blinded
                        position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));' 
                        current_operation: OPENING
                    - delay: 1000 ms
            else:
              - cover.template.publish:
                  id: blinded
                  position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));' 
                  current_operation: OPENING
              - wait_until: # Wait until endstop reached
                  lambda: 'return (id($mystepper).current_position == id(endstop));'
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id($mystepper).current_position; 
        - globals.set: # Set toggle to OPEN (No need for 'optimistic mode')
            id: openclosed
            value: '1'
        - cover.template.publish:
            id: blinded
            state: OPEN 
            current_operation: IDLE
    close_action:
      then:
        - logger.log: "Closing"
        - stepper.set_target: # Send stepper to 0
            id: $mystepper
            target: '0'
        - if:
            condition: 
              lambda: 'return id(reportin) == 1;'
            then:
              - while:
                  condition:
                    lambda: 'return id($mystepper).current_position != 0;'
                  then:
                    - cover.template.publish:
                        id: blinded
                        position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));' 
                        current_operation: CLOSING
                    - delay: 1000 ms
            else:
              - cover.template.publish:
                  id: blinded
                  position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));' 
                  current_operation: CLOSING
              - wait_until: # Wait until endstop reached
                  lambda: 'return id($mystepper).current_position == 0;'
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id($mystepper).current_position; 
        - globals.set: # Set toggle to CLOSED (No need for 'optimistic mode')
            id: openclosed
            value: '0'
        - cover.template.publish:
            id: blinded
            state: CLOSED
            current_operation: IDLE
    position_action:
      then:
        - stepper.set_target:
            id: $mystepper
            target: !lambda return int(id(endstop) * pos);
        - if:
            condition: 
              lambda: 'return id(reportin) == 1;'
            then:
              - while:
                  condition:
                    lambda: 'return id($mystepper).current_position != int(id(endstop) * pos);'
                  then:
                    - cover.template.publish:
                        id: blinded
                        position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));' 
                    - delay: 1000 ms
            else:
              - wait_until: # Wait until endstop reached
                  lambda: 'return id($mystepper).current_position == (int(id(endstop) * pos));'
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id($mystepper).current_position; 
        - cover.template.publish:
            id: blinded
            position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));' 
            current_operation: IDLE
    stop_action:
      then:
        - stepper.set_target:
            id: $mystepper
            target: !lambda return id($mystepper).current_position;
        - globals.set: # Set global to current position
            id: ${mystepper}_global
            value: !lambda return id($mystepper).current_position;
        - cover.template.publish:
            id: blinded
            position: !lambda 'return (float(float(id($mystepper).current_position) / float(id(endstop))));' 
            current_operation: IDLE
    has_position: true
    device_class: blind
  #Stepper2
  - platform: template
    name: "${upper_devicename} 2"
    id: blinded_2
    open_action:
      then:
        - logger.log: "Opening"
        - logger.log:
            format: "Endstop is: %d"
            args: [ 'id(endstop_2)' ]
        - stepper.set_target: # Send stepper to endstop
            id: $mystepper_2
            target: !lambda return id(endstop_2);
        - if:
            condition: 
              lambda: 'return id(reportin_2) == 1;' # If Reporting is Selected
            then:
              - while:
                  condition:
                    lambda: 'return id($mystepper_2).current_position != id(endstop_2);'
                  then:
                    - cover.template.publish:
                        id: blinded_2
                        position: !lambda 'return (float(float(id($mystepper_2).current_position) / float(id(endstop_2))));' 
                        current_operation: OPENING
                    - delay: 1000 ms
            else:
              - cover.template.publish:
                  id: blinded_2
                  position: !lambda 'return (float(float(id($mystepper_2).current_position) / float(id(endstop_2))));' 
                  current_operation: OPENING
              - wait_until: # Wait until endstop reached
                  lambda: 'return (id($mystepper_2).current_position == id(endstop_2));'
        - globals.set: # Set global to current position
            id: ${mystepper_2}_global
            value: !lambda return id($mystepper_2).current_position; 
        - globals.set: # Set toggle to OPEN (No need for 'optimistic mode')
            id: openclosed_2
            value: '1'
        - cover.template.publish:
            id: blinded_2
            state: OPEN 
            current_operation: IDLE
    close_action:
      then:
        - logger.log: "Closing"
        - stepper.set_target: # Send stepper to 0
            id: $mystepper_2
            target: '0'
        - if:
            condition: 
              lambda: 'return id(reportin_2) == 1;'
            then:
              - while:
                  condition:
                    lambda: 'return id($mystepper_2).current_position != 0;'
                  then:
                    - cover.template.publish:
                        id: blinded_2
                        position: !lambda 'return (float(float(id($mystepper_2).current_position) / float(id(endstop_2))));' 
                        current_operation: CLOSING
                    - delay: 1000 ms
            else:
              - cover.template.publish:
                  id: blinded_2
                  position: !lambda 'return (float(float(id($mystepper_2).current_position) / float(id(endstop_2))));' 
                  current_operation: CLOSING
              - wait_until: # Wait until endstop reached
                  lambda: 'return id($mystepper_2).current_position == 0;'
        - globals.set: # Set global to current position
            id: ${mystepper_2}_global
            value: !lambda return id($mystepper_2).current_position; 
        - globals.set: # Set toggle to CLOSED (No need for 'optimistic mode')
            id: openclosed_2
            value: '0'
        - cover.template.publish:
            id: blinded_2
            state: CLOSED
            current_operation: IDLE
    position_action:
      then:
        - stepper.set_target:
            id: $mystepper_2
            target: !lambda return int(id(endstop_2) * pos);
        - if:
            condition: 
              lambda: 'return id(reportin_2) == 1;'
            then:
              - while:
                  condition:
                    lambda: 'return id($mystepper_2).current_position != int(id(endstop_2) * pos);'
                  then:
                    - cover.template.publish:
                        id: blinded_2
                        position: !lambda 'return (float(float(id($mystepper_2).current_position) / float(id(endstop_2))));' 
                    - delay: 1000 ms
            else:
              - wait_until: # Wait until endstop reached
                  lambda: 'return id($mystepper_2).current_position == (int(id(endstop_2) * pos));'
        - globals.set: # Set global to current position
            id: ${mystepper_2}_global
            value: !lambda return id($mystepper_2).current_position; 
        - cover.template.publish:
            id: blinded_2
            position: !lambda 'return (float(float(id($mystepper_2).current_position) / float(id(endstop_2))));' 
            current_operation: IDLE
    stop_action:
      then:
        - stepper.set_target:
            id: $mystepper_2
            target: !lambda return id($mystepper_2).current_position;
        - globals.set: # Set global to current position
            id: ${mystepper_2}_global
            value: !lambda return id($mystepper_2).current_position;
        - cover.template.publish:
            id: blinded_2
            position: !lambda 'return (float(float(id($mystepper_2).current_position) / float(id(endstop_2))));' 
            current_operation: IDLE
    has_position: true
    device_class: blind

script:
  - id: setupbutton
    then:
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 3);'
          then:
            - logger.log: "Pressed Setup Button: Mode 3"
            - logger.log: "Blind is now set up"
            - logger.log:
                format: "Endstop is: %d"
                args: [ 'id(endstop)' ]
            - stepper.set_target: # Set Stepper position
                id: $mystepper
                target: !lambda return id($mystepper).current_position;
            - globals.set: # Set Endstop Variable
                id: endstop
                value: !lambda return id($mystepper).current_position;
            - globals.set: # Set Global stepper position
                id: ${mystepper}_global
                value: !lambda return id($mystepper).current_position;
            - globals.set: # Reset Setting Mode
                id: settingmode
                value:  '0'
            - globals.set: # Set toggle to Open
                id: openclosed
                value: '1'
            - cover.template.publish:
                id: blinded
                state: OPEN 
                current_operation: IDLE
            - logger.log: "Exiting Setting Mode"
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 2);'
          then:
            - logger.log: "Pressed Setup Button: Mode 2"
            - logger.log: "Blind is Opening, Press button when fully open"
            - stepper.report_position: # Reset Stepper position to 0
                id: $mystepper
                position: '0'
            - stepper.set_target: # Reset Stepper position to 0
                id: $mystepper
                target: '0'
            - globals.set: # Move stepper to 0 (doesn't move it's already there!)
                id: ${mystepper}_global
                value: '0'
            - stepper.set_target: # Reset Stepper position to 140000
                id: $mystepper
                target: '140000'
            - globals.set: # Advance setup to next mode
                id: settingmode
                value:  '3'
      - if:
          condition:
            - lambda: 'return (id(settingmode) == 1);'
          then:
            - logger.log: "Pressed Setup Button: Mode 1"
            - logger.log: "Blind is Closing, Press button when fully closed"
            - stepper.report_position: # Set Stepper position to 140000, makes it move to 0 (Closed)
                id: $mystepper
                position: '140000'
            - globals.set: # Advance setup to next mode
                id: settingmode
                value:  '2'

  - id: setupbutton_2
    then:
      - if:
          condition:
            - lambda: 'return (id(settingmode_2) == 3);'
          then:
            - logger.log: "Pressed Setup Button: Mode 3"
            - logger.log: "Blind is now set up"
            - logger.log:
                format: "Endstop is: %d"
                args: [ 'id(endstop_2)' ]
            - stepper.set_target: # Set Stepper position
                id: $mystepper_2
                target: !lambda return id($mystepper_2).current_position;
            - globals.set: # Set Endstop Variable
                id: endstop_2
                value: !lambda return id($mystepper_2).current_position;
            - globals.set: # Set Global stepper position
                id: ${mystepper_2}_global
                value: !lambda return id($mystepper_2).current_position;
            - globals.set: # Reset Setting Mode
                id: settingmode_2
                value:  '0'
            - globals.set: # Set toggle to Open
                id: openclosed_2
                value: '1'
            - cover.template.publish:
                id: blinded_2
                state: OPEN 
                current_operation: IDLE
            - logger.log: "Exiting Setting Mode"
      - if:
          condition:
            - lambda: 'return (id(settingmode_2) == 2);'
          then:
            - logger.log: "Pressed Setup Button: Mode 2"
            - logger.log: "Blind is Opening, Press button when fully open"
            - stepper.report_position: # Reset Stepper position to 0
                id: $mystepper_2
                position: '0'
            - stepper.set_target: # Reset Stepper position to 0
                id: $mystepper_2
                target: '0'
            - globals.set: # Move stepper to 0 (doesn't move it's already there!)
                id: ${mystepper_2}_global
                value: '0'
            - stepper.set_target: # Reset Stepper position to 140000
                id: $mystepper_2
                target: '140000'
            - globals.set: # Advance setup to next mode
                id: settingmode_2
                value:  '3'
      - if:
          condition:
            - lambda: 'return (id(settingmode_2) == 1);'
          then:
            - logger.log: "Pressed Setup Button: Mode 1"
            - logger.log: "Blind is Closing, Press button when fully closed"
            - stepper.report_position: # Set Stepper position to 140000, makes it move to 0 (Closed)
                id: $mystepper_2
                position: '140000'
            - globals.set: # Advance setup to next mode
                id: settingmode_2
                value:  '2'